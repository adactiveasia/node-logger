/** @module ACAN */

import check from "check-types";

const _url = new WeakMap();
const _parameters = new WeakMap();
const _headers = new WeakMap();
const _method = new WeakMap();
const _handleAs = new WeakMap();
const _data = new WeakMap();

/**
 * Class Utils for request.
 * @property {JSON} parameters
 * @property {JSON} headers
 * @property {string} method
 * @property {string} handleAs
 * @property {string} url
 * @property {JSON} data
 */
class Request {
    constructor() {
        this.parameters = {};
        this.headers = {};
        this.method = "POST";
        this.handleAs = "json";
        this.url = "";
        this.data = {};
    }

    get parameters() {
        return _parameters.get(this);
    }

    set parameters(parameters) {

        check.assert.object(parameters, "Should be an object");

        _parameters.set(this, parameters);

        return this;
    }

    addParameter(name, value) {
        this.parameters[name] = value;

        return this;
    }

    addParameters(parameters) {
        const keys = Object.keys(parameters);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            this.addParameter(key, parameters[key]);
        }

        return this;
    }

    formattedParameters() {
        const str = [];
        const keys = Object.keys(this.parameters);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = encodeURIComponent(this.parameters[key]);
            str.push(`${key}=${value}`);
        }

        return str.join("&");
    }

    get headers() {
        return _headers.get(this);
    }

    set headers(headers) {

        check.assert.object(headers, "Should be an object");

        _headers.set(this, headers);

        return this;
    }

    addHeader(name, value) {
        this.headers[name] = value;

        return this;
    }

    addHeaders(headers) {
        const keys = Object.keys(headers);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            this.addHeader(key, headers[key]);
        }

        return this;
    }

    get method() {
        return _method.get(this);
    }

    set method(method) {
        check.assert.string(method, "Should be a string");

        _method.set(this, method);

        return this;
    }

    get handleAs() {
        return _handleAs.get(this);
    }

    set handleAs(handleAs) {

        check.assert.string(handleAs, "Should be a string");

        _handleAs.set(this, handleAs);

        return this;
    }

    get url() {
        return _url.get(this);
    }

    set url(url) {
        check.assert.string(url, "Should be a string");

        if (url !== null && url.indexOf("?") !== -1) {
            const parts = url.split("?");
            url = parts.splice(0, 1)[0];
            const serializedParameters = parts.join("?");
            const parametersParts = serializedParameters.split("&");
            for (let i = 0; i < parametersParts.length; i++) {
                const parameterParts = parametersParts[i].split("=");
                const name = parameterParts.splice(0, 1)[0];
                const value = parameterParts.join("=");
                this.addParameter(name, value);
            }
        }

        _url.set(this, url);

        return this;
    }

    get data() {
        return _data.get(this);
    }

    set data(data) {

        check.assert.object(data, "Should be an object");

        _data.set(this, data);

        return this;
    }

    addSingleData(name, value) {
        this.data[name] = value;

        return this;
    }

    addData(data) {
        const keys = Object.keys(data);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            this.addSingleData(key, data[key]);
        }

        return this;
    }

    formattedData() {
        const str = [];
        const keys = Object.keys(this.data);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = encodeURIComponent(this.data[key]);
            str.push(`${key}=${value}`);
        }

        return str.join("&");
    }

    formattedUrl() {
        return this.url + "?" + this.formattedParameters();
    }
}

export default Request;

