/** @module ACAN */

import check from "check-types";

const _distEndPoint = new WeakMap();
const _localEndPoint = new WeakMap();
const _analyticsSite = new WeakMap();
const _token = new WeakMap();
const _site = new WeakMap();
const _device = new WeakMap();
const _dataFolder = new WeakMap();
const _logLevel = new WeakMap();
const _flushInterval = new WeakMap();
const _pingInterval = new WeakMap();

/**
 * @property {string} distEndPoint
 * @property {string} localEndPoint
 * @property {Number} analyticsSite
 * @property {string} token
 * @property {Number} site
 * @property {Number} device
 * @property {?string} [dataFolder=./data]
 * @property {?string} [logLevel=debug]
 * @property {?Number} [flushInterval=(120000)]
 * @property {?Number} [pingInterval=(10000)]
 */
class Options {

    constructor() {
        _distEndPoint.set(this, null);
        _localEndPoint.set(this, null);
        _analyticsSite.set(this, 0);
        _token.set(this, null);
        _site.set(this, 0);
        _device.set(this, 0);
        _dataFolder.set(this, "./data");
        _logLevel.set(this, "debug");
        _flushInterval.set(this, 120000);
        _pingInterval.set(this, 10000);
    }

    get distEndPoint() {
        return _distEndPoint.get(this);
    }

    set distEndPoint(distEndPoint) {
        check.assert.string(distEndPoint);

        return _distEndPoint.set(this, distEndPoint);
    }

    get localEndPoint() {
        return _localEndPoint.get(this);
    }

    set localEndPoint(localEndPoint) {
        check.assert.string(localEndPoint);

        return _localEndPoint.set(this, localEndPoint);
    }

    get analyticsSite() {
        return _analyticsSite.get(this);
    }

    set analyticsSite(analyticsSite) {
        check.assert.integer(analyticsSite, "Should be an integer");
        check.assert.positive(analyticsSite, "Should be positive");

        return _analyticsSite.set(this, analyticsSite);
    }

    get token() {
        return _token.get(this);
    }

    set token(token) {
        check.assert.string(token, "Should be a string");

        return _token.set(this, token);
    }

    get site() {
        return _site.get(this);
    }

    set site(site) {
        check.assert.integer(site, "Should be an integer");
        check.assert.positive(site, "Should be positive");

        return _site.set(this, site);
    }

    get device() {
        return _device.get(this);
    }

    set device(device) {
        check.assert.integer(device, "Should be an integer");
        check.assert.positive(device, "Should be positive");

        return _device.set(this, device);
    }

    get dataFolder() {
        return _dataFolder.get(this);
    }

    set dataFolder(dataFolder) {
        check.assert.string(dataFolder, "Should be a string");

        return _dataFolder.set(this, dataFolder);
    }

    get logLevel() {
        return _logLevel.get(this);
    }

    set logLevel(logLevel) {
        check.assert.string(logLevel, "Should be a string");

        return _logLevel.set(this, logLevel);
    }

    get flushInterval() {
        return _flushInterval.get(this);
    }

    set flushInterval(flushInterval) {
        check.assert.integer(flushInterval, "Should be an integer");
        check.assert.positive(flushInterval, "Should be positive");

        return _flushInterval.set(this, flushInterval);
    }

    get pingInterval() {
        return _pingInterval.get(this);
    }

    set pingInterval(pingInterval) {
        check.assert.integer(pingInterval, "Should be an integer");
        check.assert.positive(pingInterval, "Should be positive");

        return _pingInterval.set(this, pingInterval);
    }

    toJSON() {
        let json = {};
        json.distEndPoint = this.distEndPoint;
        json.localEndPoint = this.localEndPoint;
        json.analyticsSite = this.analyticsSite;
        json.token = this.token;
        json.site = this.site;
        json.device = this.device;
        json.dataFolder = this.dataFolder;
        json.logLevel = this.logLevel;
        json.flushInterval = this.flushInterval;
        json.pingInterval = this.pingInterval;

        return json;
    }

    static fromJSON(json) {
        let entity = new this();
        var keys = Object.keys(json);

        if (check.includes(keys, "distEndPoint"))
            entity.distEndPoint = json.distEndPoint;
        if (check.includes(keys, "localEndPoint"))
            entity.localEndPoint = json.localEndPoint;
        if (check.includes(keys, "analyticsSite"))
            entity.analyticsSite = json.analyticsSite;
        if (check.includes(keys, "token"))
            entity.token = json.token;
        if (check.includes(keys, "site"))
            entity.site = json.site;
        if (check.includes(keys, "device"))
            entity.device = json.device;
        if (check.includes(keys, "dataFolder"))
            entity.dataFolder = json.dataFolder;
        if (check.includes(keys, "logLevel"))
            entity.logLevel = json.logLevel;
        if (check.includes(keys, "flushInterval"))
            entity.flushInterval = json.flushInterval;
        if (check.includes(keys, "pingInterval"))
            entity.pingInterval = json.pingInterval;

        return entity;
    }
}

export default Options;